#!/usr/bin/env ruby

require_relative 'image_result'
require 'mini_magick'
require 'parallel'
require 'shellwords'
require 'terminal-table'
require 'csv'
require 'fileutils'

if ARGV.empty?
  puts "Usage: #{$PROGRAM_NAME} <image_file(s)>"
  Process.exit(-1)
end

ARGV.each do |item|
  basename = File.basename(item)
  item = File.realpath(item)
  result = []
  original_image = ImageResult.new(item, 'ORIGINAL')
  result << original_image

  Dir.mktmpdir("jpegify-#{basename}") do |tmpdir|
    opts = { progress: 'Converting dat JPEG, please wait...' }
    crunch_result = Parallel.map(100.downto(1), opts) do |quality|
      new_path = File.join(tmpdir, "#{basename}-#{quality}.jpg")
      MiniMagick::Tool::Convert.new do |conv|
        conv.quality quality
        conv << item
        conv << new_path
      end
      ImageResult.new(new_path, quality, item)
    end

    result.concat crunch_result
    table = Terminal::Table.new do |t|
      t << ['Quality', 'Filesize', 'Filesize reduction']
      t << :separator
      result.each do |image|
        t << [image.quality, image.human_filesize, image.percent_size_reduction]
      end
    end
    puts table

    open_cmd = Shellwords.join(['xdg-open', tmpdir])
    `#{open_cmd}`

    puts 'Enter a quality to replace the original'
    quality = STDIN.gets.chomp.to_i
    exit if quality < 1

    desired = result.find{ |i| i.quality == quality }
    new_file_name = File.basename(desired.original, File.extname(desired.original)) + '.jpg'
    new_file_dir = File.dirname(desired.original)
    final_complete_path = File.join(new_file_dir, new_file_name)

    FileUtils.rm_f(item)
    FileUtils.mv(desired.filename, final_complete_path)
  end
end
